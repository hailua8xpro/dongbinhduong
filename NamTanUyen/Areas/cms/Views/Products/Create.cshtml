@model NamTanUyen.Models.Product

@{
    ViewBag.Title = "Sản phẩm";
}

<h2>Thêm mới</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Sản phẩm</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.ProductObjectId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProductObjectId", null,"Chọn đối tượng sản phẩm", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProductObjectId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ProductCategoryId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProductCategoryId", null,"Chọn loại sản phẩm", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProductCategoryId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ProductGroupId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ProductGroupId", null,"Chọn nhóm sản phẩm", htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ProductGroupId, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2">
                <a class="btn btn-primary" href="javascript:" id="btnAddSubCateGroup">Thêm Loại - Nhóm sản phẩm phụ</a>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Area, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Area, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Area, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Area2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Area2, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Area2, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Ratio, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Ratio, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Ratio, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control", type = "number" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger"})
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.OrderIndex, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.OrderIndex, new { htmlAttributes = new { @class = "form-control", type = "number" } })
                @Html.ValidationMessageFor(model => model.OrderIndex, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <label for="ImageFile" class="control-label col-md-4">Hình đại diện (265 x 265)</label>
            <div class="col-md-10">
                <input type="file" name="ImageFile" class="form-control" value="" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.VideoUrl, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.VideoUrl, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.VideoUrl, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Map, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Map, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Map, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.ProductDesciption, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductDesciption, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductDesciption, "", new { @class = "text-danger" })
            </div>
        </div>

      

        <div class="form-group">
            @Html.LabelFor(model => model.Metakeywords, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Metakeywords, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Metakeywords, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.MetaDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.MetaDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.MetaDescription, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsActive)
                    @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.SalePrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SalePrice, new { htmlAttributes = new { @class = "form-control",type="number",min=0 } })
                @Html.ValidationMessageFor(model => model.SalePrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsHasPromotion, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsHasPromotion)
                    @Html.ValidationMessageFor(model => model.IsHasPromotion, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsNew, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsNew)
                    @Html.ValidationMessageFor(model => model.IsNew, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.IsBestSell, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsBestSell)
                    @Html.ValidationMessageFor(model => model.IsBestSell, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

       
        <div class="form-group">
            @Html.LabelFor(model => model.Content, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Content, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Content, "", new { @class = "text-danger" })
            </div>
        </div>
        

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Cập nhật" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Danh sách", "Index")
</div>
<div class="modal" id="mymodal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Thêm loại, nhóm sản phẩm phụ</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
            </div>
        </div>
    </div>
</div>
@section js{
   <script src="~/Content/lib/ckeditor/ckeditor.js"></script>
<script src="~/Content/lib/ckfinder/ckfinder.js"></script>
    <script>
        var editor = CKEDITOR.replace('Content');
        $('form').submit(function (e) {
            if ($('#ProductObjectId').val() < 1 || $('#ProductObjectId').val() == undefined) {
                alert('Vui lòng chọn đối tượng sản phẩm');
                return false;
            }
            if ($('#ProductCategoryId').val() < 1 || $('#ProductCategoryId').val() == undefined) {
                alert('Vui lòng chọn nhóm sản phẩm');
                return false;
            }
            e.preventDefault();
            var url = $('form').attr('action');
            var value = CKEDITOR.instances['Content'].getData();
            $('#Content').val(value);
            var data = new FormData(this);
            var groupsselect = $('#mymodal .child-check:checked');
            var lstgp = [];

            if (groupsselect.length > 0) {
                $(groupsselect).each(function () {
                    var grid = $(this).val();
                    var cateid = $(this).data('cateId');
                    var obj = { ProductId: 0, ProductGroupId: grid, ProductCategoryId: cateid };
                    lstgp.push(obj)
                })
            }
            var lstgpstr = JSON.stringify(lstgp);
            data.append('GroupProductList', lstgpstr);
            $.ajax({
                method: 'POST',
                url: url,
                data: data,
                processData: false,
                contentType: false,
                beforeSend: function () {
                    showLoading();
                },
                success: function (e) {
                    flg = true;
                    hideLoading();
                    if (e._result === 1) {

                        alert("Thêm mới thành công");
                        location.reload();
                    }
                    else
                        alert(e._error);
                },
                error: function (e) {
                    flg = true;
                    hideLoading();
                }
            });
        })

        $('#ProductObjectId').change(function () {
            var id = $(this).val();
            var url = "/cms/ProductCategories/GetCateDropdownByObjectId";
            $.ajax({
                data: { objectid: id },
                url: url,
                beforeSend: function () {
                    showLoading();
                },
                success: function (e) {
                    $('#ProductCategoryId').replaceWith(e);
                    hideLoading();
                }
            })
        })
    </script>
<script src="~/Areas/cms/Scripts/product.dev.js"></script>
}